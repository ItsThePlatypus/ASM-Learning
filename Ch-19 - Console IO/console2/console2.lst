     1                                  ; A version of input sanitisation 
     2                                  ; Prevents input buffer overflow and parses out disallowed characters
     3                                  
     4                                  section .data
     5 00000000 48656C6C6F2C20776F-         msg1        db  "Hello, world!",10,0
     5 00000009 726C64210A00       
     6 0000000F 596F7572207475726E-         msg2        db  "Your turn (a - z only): ",0
     6 00000018 202861202D207A206F-
     6 00000021 6E6C79293A2000     
     7 00000028 596F75207479706564-         msg3        db  "You typed: ",0
     7 00000031 3A2000             
     8                                  
     9                                      inputLen    equ 10
    10 00000034 0A                          NL          db  0xA
    11                                  
    12                                  section .bss
    13 00000000 <res 0000000B>              input       resb    inputLen + 1    ; Remember to leave space for the null byte!
    14                                  
    15                                  section .text
    16                                      global main
    17                                  
    18                                  main:
    19 00000000 55                          push rbp
    20 00000001 4889E5                      mov rbp, rsp 
    21                                  
    22 00000004 48BF-                       mov rdi, msg1       ; Print the first string
    22 00000006 [0000000000000000] 
    23 0000000E E852000000                  call prints
    24                                      
    25 00000013 48BF-                       mov rdi, msg2       ; Print the second string
    25 00000015 [0F00000000000000] 
    26 0000001D E843000000                  call prints
    27                                      
    28 00000022 48BF-                       mov rdi, input      ; Get the user input & Display message
    28 00000024 [0000000000000000] 
    29 0000002C BE0A000000                  mov rsi, inputLen
    30 00000031 E863000000                  call reads
    31                                  
    32 00000036 48BF-                       mov rdi, msg3       ; Print third string
    32 00000038 [2800000000000000] 
    33 00000040 E820000000                  call prints 
    34                                  
    35 00000045 48BF-                       mov rdi, input      ; Print the user input
    35 00000047 [0000000000000000] 
    36 0000004F E811000000                  call prints
    37                                  
    38 00000054 48BF-                       mov rdi, NL         ; Print the final new line
    38 00000056 [3400000000000000] 
    39 0000005E E802000000                  call prints 
    40                                  
    41 00000063 C9                          leave
    42 00000064 C3                          ret 
    43                                  
    44                                  prints:
    45 00000065 55                          push rbp                ; Align the stack frame
    46 00000066 4889E5                      mov rbp, rsp
    47 00000069 4154                        push r12                ; Save the callee (Value may be needed on return so we push to save it)
    48                                  
    49 0000006B 4831D2                      xor rdx, rdx            ; Clear rdx
    50 0000006E 4989FC                      mov r12, rdi            ; Move the message to print into r12
    51                                  
    52                                      .lengthLoop:
    53 00000071 41803C2400                      cmp byte [r12], 0   ; Have we reached the end of the string yet?
    54 00000076 7408                            je  .lengthFound    ; If so go here
    55 00000078 48FFC2                          inc rdx             ; Increment the character count
    56 0000007B 49FFC4                          inc r12             ; Move to the next character in the string
    57 0000007E EBF1                            jmp .lengthLoop     ; Loop
    58                                      
    59                                      .lengthFound:   
    60 00000080 4883FA00                        cmp rdx, 0          ; Was there a string to print?
    61 00000084 740F                            je  .done           ; Jump straight to the end if so
    62 00000086 4889FE                          mov rsi, rdi        ; Print the message
    63 00000089 B801000000                      mov rax, 1
    64 0000008E BF01000000                      mov rdi, 1
    65 00000093 0F05                            syscall 
    66                                      
    67                                      .done:
    68 00000095 415C                            pop r12             ; Restore the callee
    69                                          
    70 00000097 C9                          leave
    71 00000098 C3                          ret
    72                                  
    73                                  reads:
    74                                  section .data
    75                                  section .bss
    76 0000000B <res 00000001>              .inputChar  resb    1       ; Input buffer
    77                                  
    78                                  section .text
    79 00000099 55                          push rbp                    ; Align the stack frame
    80 0000009A 4889E5                      mov rbp, rsp
    81                                  
    82 0000009D 4154                        push r12                    ; Save the callee registers
    83 0000009F 4155                        push r13
    84 000000A1 4156                        push r14
    85 000000A3 4989FC                      mov r12, rdi                ; r12 holds the address of the input buffer
    86 000000A6 4989F5                      mov r13, rsi                ; r13 holds the input buffer 
    87 000000A9 4D31F6                      xor r14, r14                ; Clear out r14
    88                                  
    89                                      .readC:
    90 000000AC B800000000                      mov rax, 0              ; Read...
    91 000000B1 BF01000000                      mov rdi, 1              ; ...from standard I/O
    92 000000B6 488D3425[0B000000]              lea rsi, [.inputChar]   ; Load the address of the input buffer
    93 000000BE BA01000000                      mov rdx, 1              ; Number of characters to read (We read one at a time)
    94 000000C3 0F05                            syscall
    95                                  
    96 000000C5 8A0425[0B000000]                mov al, [.inputChar]    ; Move the character to check to al
    97 000000CC 3A0425[34000000]                cmp al, byte[NL]        ; Is it the newline character?
    98 000000D3 741D                            je  .done               ; Finish up if so
    99                                  
   100 000000D5 3C20                            cmp al, 32
   101 000000D7 7408                            je  .continueSpace
   102 000000D9 3C61                            cmp al, 97              ; Is the character a lower case character?
   103 000000DB 7CCF                            jl  .readC              ; Move to next character if not
   104 000000DD 3C7A                            cmp al, 122
   105 000000DF 7FCB                            jg  .readC              ; Move to next character if not
   106                                  
   107                                      .continueSpace:
   108 000000E1 49FFC6                          inc r14                 ; Increment the character count
   109 000000E4 4D39EE                          cmp r14, r13            ; Have we read all the characters in?
   110 000000E7 77C3                            ja  .readC              ; If r14 > r13, the buffer limit has been reached. The character is ignored but the loop continues to the end of the input
   111                                  
   112 000000E9 41880424                        mov byte [r12], al      ; Move the character to r12
   113 000000ED 49FFC4                          inc r12                 ; Move to the next buffer space
   114 000000F0 EBBA                            jmp .readC              ; And onto the next character...
   115                                  
   116                                      .done:
   117 000000F2 49FFC4                          inc r12                 ; Move to the next buffer space
   118 000000F5 41C6042400                      mov byte [r12],0        ; Add the null character (This is necessary: Indicates the end of the file)
   119 000000FA 415E                            pop r14                 ; Restore callee characters
   120 000000FC 415D                            pop r13
   121 000000FE 415C                            pop r12
   122                                  
   123 00000100 C9                          leave
   124 00000101 C3                          ret
