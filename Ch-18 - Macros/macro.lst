     1                                  ; A simple example of a macro
     2                                  extern printf
     3                                  
     4                                  %define double_it(r)    sal r, 1                    ; Single line macro
     5                                  
     6                                  %macro prntf 2                                      ; Define a macro, prntf, that takes two arguments
     7                                      section .data
     8                                          %%arg1      db  %1,0                        ; These are just variables in the macro. "%%" Indicates to the preprocessor that it
     9                                          %%fmtint    db  "%s %ld",10,0               ; needs to make a new instance of these variables every time the macro is called
    10                                      section .text
    11                                          mov rdi, %%fmtint
    12                                          mov rsi, %%arg1 
    13                                          mov rdx, [%2]                               ; %2 = Second macro argument, %1 = First macro argument
    14                                          mov rax, 0
    15                                          call printf
    16                                  %endmacro                                           ; This indicates the end of the macro
    17                                  
    18                                  section .data
    19 00000000 0F00000000000000            number  dq  15
    20                                  
    21                                  section .bss
    22                                  
    23                                  section .text
    24                                      global main
    25                                  
    26                                  main:
    27 00000000 55                          push rbp
    28 00000001 4889E5                      mov rbp, rsp
    29                                  
    30                                      prntf   "The number is", number                 ; Call the macro, with the first and second arguments 
    30                              <1>  section .data
    30 00000008 546865206E756D6265- <1>  %%arg1 db %1,0
    30 00000011 7220697300          <1>
    30 00000016 257320256C640A00    <1>  %%fmtint db "%s %ld",10,0
    30                              <1>  section .text
    30 00000004 48BF-               <1>  mov rdi, %%fmtint
    30 00000006 [1600000000000000]  <1>
    30 0000000E 48BE-               <1>  mov rsi, %%arg1
    30 00000010 [0800000000000000]  <1>
    30 00000018 488B1425[00000000]  <1>  mov rdx, [%2]
    30 00000020 B800000000          <1>  mov rax, 0
    30 00000025 E8(00000000)        <1>  call printf
    31 0000002A 488B0425[00000000]          mov rax, [number]
    32 00000032 48D1E0                      double_it(rax)                                  ; Call the define, passing in the value in rax
    33 00000035 48890425[00000000]          mov [number], rax
    34                                      prntf   "The number doubled is", number
    34                              <1>  section .data
    34 0000001E 546865206E756D6265- <1>  %%arg1 db %1,0
    34 00000027 7220646F75626C6564- <1>
    34 00000030 20697300            <1>
    34 00000034 257320256C640A00    <1>  %%fmtint db "%s %ld",10,0
    34                              <1>  section .text
    34 0000003D 48BF-               <1>  mov rdi, %%fmtint
    34 0000003F [3400000000000000]  <1>
    34 00000047 48BE-               <1>  mov rsi, %%arg1
    34 00000049 [1E00000000000000]  <1>
    34 00000051 488B1425[00000000]  <1>  mov rdx, [%2]
    34 00000059 B800000000          <1>  mov rax, 0
    34 0000005E E8(00000000)        <1>  call printf
    35                                  
    36 00000063 C9                          leave
    37 00000064 C3                          ret
    38                                  
    39                                  ;*********************************************************************************************
    40                                  ; INFORMATION
    41                                  ;
    42                                  ;   -> Calling and returning from functions takes a lot of time due to the jumps required
    43                                  ;   -> A macro mitigates this issue as the macro code is inserted in-line to the main program
    44                                  ;
    45                                  ;   -> Macros are NOT part of the Intel assembly language
    46                                  ;   -> They are provided by the NASM pre-processor
    47                                  ;   -> Whilst macros decrease execution time, they do increase the size of the executable...
    48                                  ;
    49                                  ;
    50                                  ;   TYPES OF MACRO
    51                                  ;
    52                                  ;   -> %define, %macro, and %endmacro are called "Assembler Preprocessor Directives" 
    53                                  ;
    54                                  ;   -> Single line Macro
    55                                  ;       - Defined with "%define"
    56                                  ;       - The instruction is simply substituted in at runtime 
    57                                  ;
    58                                  ;   -> Multiline Macro
    59                                  ;       - Defined with "%macro...%endmacro"
    60                                  ;       - Strings and numbers are treated the same way as inline assembly 
    61                                  ;
    62                                  ;   -> Macros do make debugging very hard, as the macro code is inserted at run time!
    63                                  ;*********************************************************************************************
