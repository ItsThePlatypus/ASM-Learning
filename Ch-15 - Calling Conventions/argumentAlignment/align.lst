     1                                  ; Program demonstrating need for alignment when calling arguments in functions
     2                                  extern printf
     3                                  
     4                                  section .data
     5 00000000 4100                        first       db  "A",0
     6 00000002 4200                        second      db  "B",0
     7 00000004 4300                        third       db  "C",0
     8 00000006 4400                        fourth      db  "D",0
     9 00000008 4500                        fifth       db  "E",0
    10 0000000A 4600                        sixth       db  "F",0
    11 0000000C 4700                        seveth      db  "G",0
    12 0000000E 4800                        eigth       db  "H",0
    13 00000010 4900                        ninth       db  "I",0
    14 00000012 4A00                        tenth       db  "J",0
    15                                  
    16 00000014 54686520737472696E-         fmt         db  "The string is %s",10,0
    16 0000001D 672069732025730A00 
    17                                  
    18                                  section .bss
    19 00000000 <res 0000000B>              flist   resb    11
    20                                  
    21                                  section .text
    22                                      global main
    23                                  
    24                                  main:
    25 00000000 55                          push rbp
    26 00000001 4889E5                      mov rbp, rsp
    27                                  
    28 00000004 48BF-                       mov rdi, flist        ; The first 6 arguments a function takes go in the register
    28 00000006 [0000000000000000] 
    29 0000000E 48BE-                       mov rsi, first
    29 00000010 [0000000000000000] 
    30 00000018 48BA-                       mov rdx, second
    30 0000001A [0200000000000000] 
    31 00000022 48B9-                       mov rcx, third
    31 00000024 [0400000000000000] 
    32 0000002C 49B8-                       mov r8, fourth
    32 0000002E [0600000000000000] 
    33 00000036 49B9-                       mov r9, fifth
    33 00000038 [0800000000000000] 
    34                                  
    35 00000040 68[12000000]                push tenth          ; Any other arguments are pushed to stack in REVERSE ORDER
    36 00000045 68[10000000]                push ninth
    37 0000004A 68[0E000000]                push eigth
    38 0000004F 68[0C000000]                push seveth
    39 00000054 68[0A000000]                push sixth
    40                                  
    41 00000059 E820000000                  call lfunc
    42                                  
    43 0000005E 48BF-                       mov rdi, fmt
    43 00000060 [1400000000000000] 
    44 00000068 48BE-                       mov rsi, flist
    44 0000006A [0000000000000000] 
    45 00000072 B800000000                  mov rax, 0
    46 00000077 E8(00000000)                call printf
    47                                  
    48 0000007C C9                          leave
    49 0000007D C3                          ret
    50                                  
    51                                  lfunc:
    52 0000007E 55                          push rbp
    53 0000007F 4889E5                      mov rbp, rsp
    54                                  
    55 00000082 4831C0                      xor rax, rax
    56                                  
    57 00000085 8A06                        mov al, byte[rsi]
    58 00000087 8807                        mov [rdi], al
    59 00000089 8A02                        mov al, byte[rdx]
    60 0000008B 884701                      mov [rdi+1], al
    61 0000008E 8A01                        mov al, byte[rcx]
    62 00000090 884702                      mov [rdi+2], al
    63 00000093 418A00                      mov al, byte[r8]
    64 00000096 884703                      mov [rdi+3], al
    65 00000099 418A01                      mov al, byte[r9]
    66 0000009C 884704                      mov [rdi+4], al
    67                                  
    68 0000009F 53                          push rbx
    69 000000A0 4831DB                      xor rbx, rbx    
    70                                      
    71 000000A3 488B4510                    mov rax, qword [rbp+16]
    72 000000A7 8A18                        mov bl, byte[rax]
    73 000000A9 885F05                      mov [rdi+5], bl
    74 000000AC 488B4518                    mov rax, qword [rbp+24]
    75 000000B0 8A18                        mov bl, byte[rax]
    76 000000B2 885F06                      mov [rdi+6], bl
    77 000000B5 488B4520                    mov rax, qword [rbp+32]
    78 000000B9 8A18                        mov bl, byte[rax]
    79 000000BB 885F07                      mov [rdi+7], bl
    80 000000BE 488B4528                    mov rax, qword [rbp+40]
    81 000000C2 8A18                        mov bl, byte[rax]
    82 000000C4 885F08                      mov [rdi+8], bl
    83 000000C7 488B4530                    mov rax, qword [rbp+48]
    84 000000CB 8A18                        mov bl, byte[rax]
    85 000000CD 885F09                      mov [rdi+9], bl
    86                                  
    87 000000D0 B300                        mov bl, 0
    88 000000D2 885F0A                      mov [rdi + 10], bl
    89                                  
    90 000000D5 5B                          pop rbx
    91 000000D6 C9                          leave
    92 000000D7 C3                          ret
